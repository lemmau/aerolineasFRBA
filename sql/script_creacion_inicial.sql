/* --		
	Son un total de 19 tablas
	
	Sacar esto cuando lo entreguemos porque solo esta para testing. 
	SI falla -> correr varias veces asi "vuelan" las restricciones de FK

DROP TABLE [HAY_TABLA].VIAJE
DROP TABLE [HAY_TABLA].AERONAVE
DROP TABLE [HAY_TABLA].USUARIO
DROP TABLE [HAY_TABLA].CANJE
DROP TABLE [HAY_TABLA].CLIENTE
DROP TABLE [HAY_TABLA].CIUDAD
DROP TABLE [HAY_TABLA].RUTA
DROP TABLE [HAY_TABLA].SERVICIO
DROP TABLE [HAY_TABLA].BUTACA
DROP TABLE [HAY_TABLA].DEVOLUCION
DROP TABLE [HAY_TABLA].PASAJE
DROP TABLE [HAY_TABLA].COMPRA
DROP TABLE [HAY_TABLA].ENCOMIENDA
DROP TABLE [HAY_TABLA].TARJETA
DROP TABLE [HAY_TABLA].TIPOTARJETA
DROP TABLE [HAY_TABLA].PRODUCTO
DROP TABLE [HAY_TABLA].ROL
DROP TABLE [HAY_TABLA].FUNCIONALIDAD_ROL
DROP TABLE [HAY_TABLA].FUNCIONALIDAD

DROP PROCEDURE [HAY_TABLA].[sp_get_rol_by_id]
DROP PROCEDURE [HAY_TABLA].[sp_insertar_rol]
DROP PROCEDURE [HAY_TABLA].[sp_baja_rol]
DROP PROCEDURE [HAY_TABLA].[sp_select_roles]
DROP PROCEDURE [HAY_TABLA].[sp_get_usuario_by_id]
DROP PROCEDURE [HAY_TABLA].[sp_get_usuario_by_login]
DROP PROCEDURE [HAY_TABLA].[sp_get_usuario_intentos]
DROP PROCEDURE [HAY_TABLA].[sp_set_usuario_intentos]

DROP SCHEMA [HAY_TABLA]
*/

USE [GD2C2015]
GO

IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name='HAY_TABLA')
BEGIN
    -- The schema must be run in its own batch!
	EXEC ('CREATE SCHEMA [HAY_TABLA]')
END
GO

print 'Inicio de Instrucciones DDL.'

CREATE TABLE [HAY_TABLA].ROL
(
ID			INT IDENTITY(1,1) NOT NULL,
NOMBRE		NVARCHAR(50) UNIQUE NOT NULL,
STATUS		BIT NOT NULL DEFAULT 1,	-- todos activos por default

PRIMARY KEY (ID)
);
GO

CREATE TABLE [HAY_TABLA].FUNCIONALIDAD (
ID 			INT IDENTITY(1,1) NOT NULL,
NOMBRE		NVARCHAR(50),

PRIMARY KEY (ID)
);
GO

CREATE TABLE [HAY_TABLA].FUNCIONALIDAD_ROL (
ID_FUNCIONALIDAD	INT NOT NULL,
ID_ROL				INT NOT NULL,

PRIMARY KEY (ID_FUNCIONALIDAD, ID_ROL),
FOREIGN KEY (ID_FUNCIONALIDAD) REFERENCES [HAY_TABLA].FUNCIONALIDAD,
FOREIGN KEY (ID_ROL) REFERENCES [HAY_TABLA].ROL,
);
GO

CREATE TABLE [HAY_TABLA].USUARIO (
ID 					INT IDENTITY(1,1) NOT NULL,
ID_ROL				INT NOT NULL,
USERNAME			NVARCHAR(255) UNIQUE NOT NULL,
PASSWORD			NVARCHAR(255),	-- mediante encriptacion SHA256
INTENTOSFALLIDOS	INT NOT NULL DEFAULT 0,	-- al llegar a 3 se pone STATUS en 0

PRIMARY KEY (ID),
FOREIGN KEY (ID_ROL) REFERENCES [HAY_TABLA].ROL
);
GO

CREATE TABLE [HAY_TABLA].CLIENTE (
ID 					INT IDENTITY(1,1) NOT NULL,
ID_ROL				INT NOT NULL DEFAULT 2, -- ROL 2 (GUEST)
DNI 				INT NOT NULL, -- UNIQUE 
NOMBRE				NVARCHAR(255),
APELLIDO			NVARCHAR(255),
DIRECCION			NVARCHAR(255),
TELEFONO			NVARCHAR(255),
MAIL 				NVARCHAR(255),
FECHANACIMIENTO		DATETIME,

PRIMARY KEY (ID),
FOREIGN KEY (ID_ROL) REFERENCES [HAY_TABLA].ROL
);
GO

CREATE TABLE [HAY_TABLA].PRODUCTO (
ID 					INT IDENTITY(1,1) NOT NULL,
DESCRIPCION			NVARCHAR(255) NOT NULL,
CANTSTOCK			INT NOT NULL,
MILLASNECESARIAS	INT NOT NULL,

PRIMARY KEY (ID),
);
GO

CREATE TABLE [HAY_TABLA].CANJE (
ID 					INT IDENTITY(1,1) NOT NULL,
ID_PRODUCTO			INT NOT NULL,
ID_CLIENTE			INT NOT NULL,
DNI					INT NOT NULL,
CANTIDAD			INT NOT NULL,
FECHA				DATETIME NOT NULL,

PRIMARY KEY (ID),
FOREIGN KEY (ID_PRODUCTO) REFERENCES [HAY_TABLA].PRODUCTO,
FOREIGN KEY (ID_CLIENTE) REFERENCES [HAY_TABLA].CLIENTE
);
GO

CREATE TABLE [HAY_TABLA].CIUDAD (
ID 			INT	IDENTITY(1,1) NOT NULL,
NOMBRE		NVARCHAR(100) NOT NULL,
STATUS		BIT NOT NULL DEFAULT 1,	-- 0 cuando es BAJA

PRIMARY KEY (ID)
);
GO

CREATE TABLE [HAY_TABLA].SERVICIO (
ID 						INT	IDENTITY(1,1) NOT NULL,
TIPOSERVICIO			NVARCHAR(255) NOT NULL,
PORCENTAJEADICIONAL		INT NOT NULL,

PRIMARY KEY (ID)
);
GO

CREATE TABLE [HAY_TABLA].RUTA (
ID 					INT IDENTITY(1,1) NOT NULL,
CODIGO 				INT UNIQUE NOT NULL,
ID_CDADORIGEN		INT NOT NULL,
ID_CDADDESTINO		INT NOT NULL,
ID_SERVICIO			INT NOT NULL,
PRECIOBASEPASAJE 	INT NOT NULL,
PRECIOBASEKG 		INT NOT NULL,
STATUS				BIT NOT NULL DEFAULT 1,	-- 0 cuando es BAJA

PRIMARY KEY (ID),
FOREIGN KEY (ID_CDADORIGEN) REFERENCES [HAY_TABLA].CIUDAD,
FOREIGN KEY (ID_CDADDESTINO) REFERENCES [HAY_TABLA].CIUDAD,
FOREIGN KEY (ID_SERVICIO) REFERENCES [HAY_TABLA].SERVICIO
);
GO

CREATE TABLE [HAY_TABLA].AERONAVE (
ID 						INT IDENTITY(1,1) NOT NULL,
--NUMERO 				INT UNIQUE NOT NULL,
FECHAALTA				DATETIME,
ID_SERVICIO				INT NOT NULL,
MODELO					NVARCHAR(255) NOT NULL,
MATRICULA				NVARCHAR(255) NOT NULL,
FABRICANTE				NVARCHAR(255) NOT NULL,
CANTBUTACAS				INT NOT NULL,
ESPACIOKGENCOMIENDAS	INT NOT NULL,
BAJAFUERASERVICIO		BIT NOT NULL DEFAULT 0, -- false
FECHAFUERASERVICIO		DATETIME,
FECHAALTAREINICIO		DATETIME,
BAJAVIDAUTIL			BIT NOT NULL DEFAULT 0,	-- false
FECHABAJADEFINITIVA 	DATETIME,

PRIMARY KEY (ID),
FOREIGN KEY (ID_SERVICIO) REFERENCES [HAY_TABLA].SERVICIO
);
GO

CREATE TABLE [HAY_TABLA].BUTACA (
ID 						INT	IDENTITY(1,1) NOT NULL,
NUMERO 					INT NOT NULL,
ID_AERONAVE				INT NOT NULL,
TIPO 					NVARCHAR(255) NOT NULL,	-- pasillo / ventanilla / 0 (cuando se trata de una encomienda)
PISO					BIT NOT NULL, -- TODAS estan en el piso '1' !!
STATUS					BIT NOT NULL DEFAULT 0,	-- libre / ocupada

PRIMARY KEY (ID),
FOREIGN KEY (ID_AERONAVE) REFERENCES [HAY_TABLA].AERONAVE
);
GO

CREATE TABLE [HAY_TABLA].VIAJE (
ID 						INT IDENTITY(1,1) NOT NULL,
NUMEROAERONAVE			INT NOT NULL,
CODIGORUTA 				INT NOT NULL,
FECHASALIDA 			DATETIME NOT NULL,
FECHALLEGADA 			DATETIME NOT NULL,
FECHALLEGADAESTIMADA 	DATETIME NOT NULL,
STATUS 					BIT NOT NULL DEFAULT 0, -- no realizado / realizado

PRIMARY KEY (ID)
);
GO

CREATE TABLE [HAY_TABLA].TIPOTARJETA
(
ID					INT IDENTITY(1,1) NOT NULL,
NOMBRE 				NVARCHAR(50) NOT NULL,
CANTCUOTAS 			INT NOT NULL,

PRIMARY KEY (ID)
);
GO

CREATE TABLE [HAY_TABLA].TARJETA
(
ID					INT IDENTITY(1,1) NOT NULL,
ID_TIPOTARJETA 		INT NOT NULL,
ID_CLIENTE 			INT NOT NULL,
NUMERO				INT NOT NULL,
CLAVE				INT NOT NULL,
FECHAVTO			DATETIME NOT NULL,

PRIMARY KEY (ID),
FOREIGN KEY(ID_TIPOTARJETA) REFERENCES [HAY_TABLA].TIPOTARJETA,
FOREIGN KEY(ID_CLIENTE) REFERENCES [HAY_TABLA].CLIENTE
);
GO

CREATE TABLE [HAY_TABLA].COMPRA (
ID 						INT IDENTITY(1,1) NOT NULL,
NUMEROCOMPRA 			INT NOT NULL,
ID_CLIENTE				INT NOT NULL,
ID_TARJETA				INT NOT NULL,
ID_VIAJE				INT NOT NULL,
FECHA 					DATETIME NOT NULL,
IMPORTE 				INT NOT NULL,

PRIMARY KEY (ID),
FOREIGN KEY (ID_CLIENTE) REFERENCES [HAY_TABLA].CLIENTE,
FOREIGN KEY (ID_TARJETA) REFERENCES [HAY_TABLA].TARJETA,
FOREIGN KEY (ID_VIAJE) REFERENCES [HAY_TABLA].VIAJE
);
GO

CREATE TABLE [HAY_TABLA].ENCOMIENDA (
ID 						INT IDENTITY(1,1) NOT NULL,
NUMERO 					INT NOT NULL,
CODIGORUTA				INT NOT NULL,
ID_CLIENTE				INT NOT NULL,
ID_COMPRA				INT NOT NULL,
FECHA 					DATETIME NOT NULL,
PESO 					INT NOT NULL,
	
PRIMARY KEY (ID),
FOREIGN KEY (ID_CLIENTE) REFERENCES [HAY_TABLA].CLIENTE,
FOREIGN KEY (ID_COMPRA) REFERENCES [HAY_TABLA].COMPRA
);
GO

CREATE TABLE [HAY_TABLA].PASAJE (
ID 						INT IDENTITY(1,1) NOT NULL,
NUMERO 					INT NOT NULL,
NUMEROCOMPRA			INT NOT NULL,
ID_CLIENTE				INT NOT NULL,
ID_TARJETA				INT NOT NULL,
ID_VIAJE				INT NOT NULL,
FECHA 					DATETIME NOT NULL,
IMPORTE 				INT NOT NULL,

PRIMARY KEY (ID),
FOREIGN KEY (ID_CLIENTE) REFERENCES [HAY_TABLA].CLIENTE,
FOREIGN KEY (ID_TARJETA) REFERENCES [HAY_TABLA].TARJETA,
FOREIGN KEY (ID_VIAJE) REFERENCES [HAY_TABLA].VIAJE
);
GO

CREATE TABLE [HAY_TABLA].DEVOLUCION (
ID 						INT IDENTITY(1,1) NOT NULL,
NUMEROCOMPRA 			INT NOT NULL,
ID_PASAJE				INT NOT NULL,
ID_ENCOMIENDA			INT NOT NULL,
FECHA 					DATETIME NOT NULL,
MOTIVOCANCELACION 		NVARCHAR(255) NOT NULL,

PRIMARY KEY (ID),
FOREIGN KEY (ID_PASAJE) REFERENCES [HAY_TABLA].PASAJE,
FOREIGN KEY (ID_ENCOMIENDA) REFERENCES [HAY_TABLA].ENCOMIENDA
);
GO

print 'Fin de Instrucciones DDL.'
/*************************************************** INSERTS ******************************************************/
-- INSERCIONES en:
--				ROLES / FUNCIONALIDADES / FUNCIONALIDADES X ROL / USUARIOS / PRODUCTOS
-----------------------------------------------------------------------------------------------

SET IDENTITY_INSERT [HAY_TABLA].ROL ON
	INSERT INTO [HAY_TABLA].ROL (ID, NOMBRE) VALUES(1,'Administrativo')
	INSERT INTO [HAY_TABLA].ROL (ID, NOMBRE) VALUES(2,'Cliente')
SET IDENTITY_INSERT [HAY_TABLA].ROL OFF
print 'Roles creados!'

-- Son 12 las FUNCIONALIDADES a desarrollar
-- La funcionalidad "Registro de Usuario" SE DECIDIÓ POR NO HACER (segun la cátedra !!!)
SET IDENTITY_INSERT [HAY_TABLA].FUNCIONALIDAD ON
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD (ID, NOMBRE) VALUES(1,'LOGIN');
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD (ID, NOMBRE) VALUES(2,'ABM. DE ROL');
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD (ID, NOMBRE) VALUES(3,'ABM. DE CIUDAD');	-- solo para búsqueda y A/B (logica)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD (ID, NOMBRE) VALUES(4,'ABM. DE RUTA AEREA');
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD (ID, NOMBRE) VALUES(5,'ABM. DE AERONAVE');
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD (ID, NOMBRE) VALUES(6,'GENERACION DE VIAJE');
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD (ID, NOMBRE) VALUES(7,'REGISTRO DE LLEGADA A DESTINO');
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD (ID, NOMBRE) VALUES(8,'COMPRA DE PASAJE/ENCOMIENDA');
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD (ID, NOMBRE) VALUES(9,'DEVOLUCION/CANCELACION DE PASAJE/ENCOMIENDA');
	-- VER si estos pueden ser 2 en 1:
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD (ID, NOMBRE) VALUES(10,'CONSULTA DE MILLAS');
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD (ID, NOMBRE) VALUES(11,'CANJE DE MILLAS');

	INSERT INTO [HAY_TABLA].FUNCIONALIDAD (ID, NOMBRE) VALUES(12,'LISTADO ESTADISTICO');
SET IDENTITY_INSERT [HAY_TABLA].FUNCIONALIDAD OFF
print 'Funcionalidades creadas!'

----------------------------------------------------
-- FUNCIONALIDADES disponibles para c/u de los ROLES
----------------------------------------------------
	--Administrativos
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (1,1)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (1,2)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (1,3)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (1,4)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (1,5)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (1,6)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (1,7)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (1,8)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (1,9)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (1,10)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (1,11)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (1,12)
	--Clientes
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (2,8)
	INSERT INTO [HAY_TABLA].FUNCIONALIDAD_ROL (ID_ROL,ID_FUNCIONALIDAD) VALUES (2,10)
	print 'Cruce de Funcionalidades por Rol insertados exitosamente!'

------------------------------------------------------
--- users ADMIN
------------------------------------------------------
INSERT INTO [HAY_TABLA].USUARIO
(ID_ROL, USERNAME, PASSWORD, INTENTOSFALLIDOS) VALUES
(1, N'admin', N'e6b87050bfcb8143fcb8db0170a4dc9ed00d904ddd3e2a4ad1b1e8dc0fdc9be7', 0)	-- password : 'w23e'
GO

INSERT INTO [HAY_TABLA].USUARIO
(ID_ROL, USERNAME, PASSWORD, INTENTOSFALLIDOS) VALUES
(1, N'admin02', N'e6b87050bfcb8143fcb8db0170a4dc9ed00d904ddd3e2a4ad1b1e8dc0fdc9be7', 0)	-- password : 'w23e'
GO

INSERT INTO [HAY_TABLA].USUARIO
(ID_ROL, USERNAME, PASSWORD, INTENTOSFALLIDOS) VALUES
(1, N'admin03', N'e6b87050bfcb8143fcb8db0170a4dc9ed00d904ddd3e2a4ad1b1e8dc0fdc9be7', 0)	-- password : 'w23e'
GO
print 'Usuarios administrativos creados ok!'

------------------------------------------------------
--- PRODUCTOS para canjes de millas
------------------------------------------------------
INSERT INTO [HAY_TABLA].PRODUCTO
(DESCRIPCION, CANTSTOCK, MILLASNECESARIAS)
VALUES
('E-Reader', 1205, 15000)
GO

INSERT INTO [HAY_TABLA].PRODUCTO
(DESCRIPCION, CANTSTOCK, MILLASNECESARIAS)
VALUES
('Afeitadora Philips', 250, 17000)
GO

INSERT INTO [HAY_TABLA].PRODUCTO
(DESCRIPCION, CANTSTOCK, MILLASNECESARIAS)
VALUES
('Samsung s6', 150, 25000)
GO

INSERT INTO [HAY_TABLA].PRODUCTO
(DESCRIPCION, CANTSTOCK, MILLASNECESARIAS)
VALUES
('Cam GO PRO HERO 4', 225, 39000)
GO

INSERT INTO [HAY_TABLA].PRODUCTO
(DESCRIPCION, CANTSTOCK, MILLASNECESARIAS)
VALUES
('Lenovo yoga 2 pro', 310, 45000)
GO

INSERT INTO [HAY_TABLA].PRODUCTO
(DESCRIPCION, CANTSTOCK, MILLASNECESARIAS)
VALUES
('HP ALL-in-one', 70, 55000)
GO

INSERT INTO [HAY_TABLA].PRODUCTO
(DESCRIPCION, CANTSTOCK, MILLASNECESARIAS)
VALUES
('Play Station 4', 99 , 56200)
GO

INSERT INTO [HAY_TABLA].PRODUCTO
(DESCRIPCION, CANTSTOCK, MILLASNECESARIAS)
VALUES
('SMART TV Samsung 40"', 59, 153200)
GO

INSERT INTO [HAY_TABLA].PRODUCTO
(DESCRIPCION, CANTSTOCK, MILLASNECESARIAS)
VALUES
('Cuatriciclo Yamaha 700', 25, 199000)
GO
print 'Productos para canjes creados ok!'
GO

print 'Fin de INSERCIONES manuales.'
GO
/***********************************************STORED PROCEDURES*********************************************/
CREATE PROCEDURE [HAY_TABLA].[sp_get_rol_by_id]
	@id int
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		Id,
		Nombre,
		Status
	FROM 
		[HAY_TABLA].Rol
	WHERE
		Id = @id
END
GO

CREATE PROCEDURE [HAY_TABLA].[sp_insertar_rol]
	@nombre NVARCHAR(50),
	@estado bit
AS
BEGIN
	
	if (exists(select id from [HAY_TABLA].ROL where NOMBRE = @nombre))
		begin
			RAISERROR(N'Ya existe un Rol con ese nombre',16,1)
			return
		end		
		
	INSERT INTO [HAY_TABLA].ROL  (NOMBRE, STATUS)
    OUTPUT
		inserted.id
    VALUES
          (@nombre, @estado)
END
GO

CREATE PROCEDURE [HAY_TABLA].[sp_baja_rol]
	@id	int
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE 
		[HAY_TABLA].ROL
	SET 
		STATUS = 0
	WHERE
		id = @id
END
GO

CREATE PROCEDURE [HAY_TABLA].[sp_select_roles]
	@nombre nvarchar(50)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		Id,
		Nombre,
		Status
	FROM	
		[HAY_TABLA].Rol
	WHERE		
		((@nombre is null) or Nombre like '%' + @nombre + '%')
	ORDER BY
		Nombre 
END
GO

CREATE PROCEDURE [HAY_TABLA].[sp_get_usuario_by_id]
	@id int
AS
BEGIN
	SET NOCOUNT ON;

	SELECT ID, ID_ROL, USERNAME, PASSWORD, INTENTOSFALLIDOS
	FROM [HAY_TABLA].USUARIO
	WHERE USUARIO.Id = @id
END
GO

CREATE PROCEDURE [HAY_TABLA].[sp_get_usuario_by_login]
	@username NVARCHAR(255),
	@password NVARCHAR(256)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT ID, ID_ROL, USERNAME, PASSWORD, INTENTOSFALLIDOS
	FROM [HAY_TABLA].USUARIO
	WHERE USERNAME = @username AND PASSWORD = @password
END
GO

CREATE PROCEDURE [HAY_TABLA].[sp_get_usuario_intentos]
	@username NVARCHAR(255)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT INTENTOSFALLIDOS
	FROM [HAY_TABLA].USUARIO
	WHERE USERNAME = @username
END
GO

CREATE PROCEDURE [HAY_TABLA].[sp_set_usuario_intentos]
	@username NVARCHAR(255),
	@intentos int
AS
BEGIN
	SET NOCOUNT ON;

	UPDATE [HAY_TABLA].USUARIO 
	SET INTENTOSFALLIDOS = @intentos 
	WHERE USERNAME = @username
END
GO

CREATE PROCEDURE [HAY_TABLA].[sp_modificacion_rol]
	@id	int,
	@nombre nvarchar(50),
	@estado bit
AS
BEGIN
	SET NOCOUNT ON;
	
		if (exists(select id from [HAY_TABLA].ROL where Nombre = @nombre and id<> @id))
		begin
			RAISERROR(N'Ya existe un Rol con ese nombre',16,1)
			return
		end		
	
	UPDATE 
		[HAY_TABLA].ROL
	SET 
		Nombre = @nombre,
		Status = @estado
	WHERE
		id = @id
END
GO

-----------------------
CREATE PROCEDURE [HAY_TABLA].[sp_select_funcionalidades_de_rol]
	@rol_id int,
	@nombre varchar(255) = null
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		 f.Id,
		 f.Nombre,
		 ISNULL((
			SELECT
				1
			FROM 
				FUNCIONALIDAD_ROL fr 
			WHERE
				fr.ID_FUNCIONALIDAD = f.id and 
				fr.ID_ROL = @rol_id), 0) AS 'Seleccionado'
	FROM
		[HAY_TABLA].FUNCIONALIDAD f
	WHERE
		(@nombre is null) or (@nombre = f.Nombre)
	ORDER BY
		Nombre
END
GO

--- =============================================
--- Description:	Devuelve un listado de funcionalidades de un rol nuevo
--- =============================================
CREATE PROCEDURE [HAY_TABLA].[sp_select_funcionalidades_de_rol_nuevo]
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		 f.Id,
		 f.Nombre,
		 0 as 'Seleccionado'
	FROM
		[HAY_TABLA].FUNCIONALIDAD f
	ORDER BY
		Nombre
END
GO

CREATE PROCEDURE [HAY_TABLA].[sp_insertar_funcionalidad_a_rol]
	@idRol int,
	@idFuncionalidad int
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO [HAY_TABLA].[FUNCIONALIDAD_ROL]
           ([ID_ROL]
           ,[ID_FUNCIONALIDAD])
     VALUES
           (@IdRol
           ,@IdFuncionalidad)
END
GO

CREATE PROCEDURE [HAY_TABLA].[sp_borrar_funcionalidades_de_rol]
       @idRol int 
AS
BEGIN
	SET NOCOUNT ON;

	DELETE FROM
		[HAY_TABLA].FUNCIONALIDAD_ROL
	WHERE
		ID_ROL = @idRol
END
GO

/*************************************************** MIGRACION ******************************************************/
--- MIGRACION - CIUDADES (Un total de 35 registros en tabla MASTER)
		INSERT INTO [HAY_TABLA].CIUDAD
					(NOMBRE)
		SELECT DISTINCT Ruta_Ciudad_Destino
  		FROM gd_esquema.Maestra
  	print 'Ciudades migradas!'

--- MIGRACION - TIPOS DE SERVICIOS (Un total de 3 registros en tabla MASTER)
		INSERT INTO [HAY_TABLA].SERVICIO
					(TIPOSERVICIO, PORCENTAJEADICIONAL)
  		SELECT DISTINCT Tipo_Servicio, 0
  		FROM gd_esquema.Maestra
  	print 'Tipos de Servicio migrados!'

--- MIGRACION - CLIENTES (Un total de 2594 registros en tabla MASTER)
	INSERT INTO [HAY_TABLA].CLIENTE
		(DNI, NOMBRE, APELLIDO, DIRECCION, TELEFONO, MAIL, FECHANACIMIENTO)	
	SELECT 
		Cli_Dni, Cli_Nombre, Cli_Apellido, Cli_Dir, Cli_Telefono, Cli_Mail, Cli_Fecha_Nac
	FROM
		gd_esquema.Maestra
	group by
		Cli_Dni, Cli_Nombre, Cli_Apellido, Cli_Dir, Cli_Telefono, Cli_Mail, Cli_Fecha_Nac
	print 'Clientes migrados!'

--- MIGRACION - AERONAVES (Un total de  30 registros en tabla MASTER)
	INSERT INTO [HAY_TABLA].AERONAVE
				(ID_SERVICIO, MODELO, MATRICULA, FABRICANTE, CANTBUTACAS, ESPACIOKGENCOMIENDAS)
   	SELECT 	SERVICIO.ID as "ID_SERVICIO", Aeronave_Modelo, Aeronave_Matricula, Aeronave_Fabricante, 
  			MAX(Butaca_Nro) as "CANTBUTACAS", Aeronave_KG_Disponibles
  	FROM 
  		gd_esquema.Maestra, 
  		[HAY_TABLA].SERVICIO
  	WHERE 
  		Tipo_Servicio = SERVICIO.TIPOSERVICIO
  	GROUP BY 
  		SERVICIO.ID, Aeronave_Modelo, Aeronave_Matricula, Aeronave_Fabricante, Aeronave_KG_Disponibles
  	print 'Aeronaves migradas!'

--- MIGRACION - BUTACAS (Un total de 1337 registros en tabla MASTER)
	INSERT INTO [HAY_TABLA].BUTACA
				(NUMERO, ID_AERONAVE, TIPO, PISO)
  	SELECT 	
  			Butaca_Nro, A.ID , Butaca_Tipo, Butaca_Piso
  	FROM 
  		gd_esquema.Maestra, [HAY_TABLA].AERONAVE A
  	WHERE 
  		A.MATRICULA = Aeronave_Matricula
  		AND Butaca_Tipo <> '0'
  	GROUP BY 
  		Butaca_Nro, Butaca_Tipo, Butaca_Piso, A.ID
  	print 'Butacas migradas!'
  	